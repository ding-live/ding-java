/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package live.ding.dingsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import live.ding.dingsdk.utils.Utils;


public class RetryAuthenticationRequest {

    /**
     * The authentication UUID that was returned when you created the authentication.
     */
    @JsonProperty("authentication_uuid")
    private String authenticationUuid;

    /**
     * Your customer UUID, which can be found in the API settings in the dashboard.
     */
    @JsonProperty("customer_uuid")
    private String customerUuid;

    @JsonCreator
    public RetryAuthenticationRequest(
            @JsonProperty("authentication_uuid") String authenticationUuid,
            @JsonProperty("customer_uuid") String customerUuid) {
        Utils.checkNotNull(authenticationUuid, "authenticationUuid");
        Utils.checkNotNull(customerUuid, "customerUuid");
        this.authenticationUuid = authenticationUuid;
        this.customerUuid = customerUuid;
    }

    /**
     * The authentication UUID that was returned when you created the authentication.
     */
    @JsonIgnore
    public String authenticationUuid() {
        return authenticationUuid;
    }

    /**
     * Your customer UUID, which can be found in the API settings in the dashboard.
     */
    @JsonIgnore
    public String customerUuid() {
        return customerUuid;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The authentication UUID that was returned when you created the authentication.
     */
    public RetryAuthenticationRequest withAuthenticationUuid(String authenticationUuid) {
        Utils.checkNotNull(authenticationUuid, "authenticationUuid");
        this.authenticationUuid = authenticationUuid;
        return this;
    }

    /**
     * Your customer UUID, which can be found in the API settings in the dashboard.
     */
    public RetryAuthenticationRequest withCustomerUuid(String customerUuid) {
        Utils.checkNotNull(customerUuid, "customerUuid");
        this.customerUuid = customerUuid;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RetryAuthenticationRequest other = (RetryAuthenticationRequest) o;
        return 
            Objects.deepEquals(this.authenticationUuid, other.authenticationUuid) &&
            Objects.deepEquals(this.customerUuid, other.customerUuid);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            authenticationUuid,
            customerUuid);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RetryAuthenticationRequest.class,
                "authenticationUuid", authenticationUuid,
                "customerUuid", customerUuid);
    }
    
    public final static class Builder {
 
        private String authenticationUuid;
 
        private String customerUuid;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The authentication UUID that was returned when you created the authentication.
         */
        public Builder authenticationUuid(String authenticationUuid) {
            Utils.checkNotNull(authenticationUuid, "authenticationUuid");
            this.authenticationUuid = authenticationUuid;
            return this;
        }

        /**
         * Your customer UUID, which can be found in the API settings in the dashboard.
         */
        public Builder customerUuid(String customerUuid) {
            Utils.checkNotNull(customerUuid, "customerUuid");
            this.customerUuid = customerUuid;
            return this;
        }
        
        public RetryAuthenticationRequest build() {
            return new RetryAuthenticationRequest(
                authenticationUuid,
                customerUuid);
        }
    }
}

