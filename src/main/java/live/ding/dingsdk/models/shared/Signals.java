/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package live.ding.dingsdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import live.ding.dingsdk.utils.Utils;

/**
 * Signals - [Signals](/guides/prevent-fraud#signals) are data points used to distinguish between fraudulent and legitimate users.
 */

public class Signals {

    /**
     * The Android SMS Retriever API hash code that identifies your app. This allows you to automatically retrieve and fill the OTP code on Android devices.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("app_realm")
    private Optional<String> appRealm;

    /**
     * The version of your application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("app_version")
    private Optional<String> appVersion;

    /**
     * Unique identifier for the user's device. For Android, this corresponds to the `ANDROID_ID` and for iOS, this corresponds to the `identifierForVendor`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("device_id")
    private Optional<String> deviceId;

    /**
     * The model of the user's device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("device_model")
    private Optional<String> deviceModel;

    /**
     * The type of device the user is using.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("device_type")
    private Optional<? extends AuthenticationStatusResponseDeviceType> deviceType;

    /**
     * The IP address of the user's device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip")
    private Optional<String> ip;

    /**
     * This signal should do more than just confirm if a user is returning to your app; it should provide a higher level of trust, indicating that the user is genuine. For more details, refer to [Signals](/guides/prevent-fraud#signals).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_returning_user")
    private Optional<Boolean> isReturningUser;

    /**
     * The version of the user's device operating system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("os_version")
    private Optional<String> osVersion;

    @JsonCreator
    public Signals(
            @JsonProperty("app_realm") Optional<String> appRealm,
            @JsonProperty("app_version") Optional<String> appVersion,
            @JsonProperty("device_id") Optional<String> deviceId,
            @JsonProperty("device_model") Optional<String> deviceModel,
            @JsonProperty("device_type") Optional<? extends AuthenticationStatusResponseDeviceType> deviceType,
            @JsonProperty("ip") Optional<String> ip,
            @JsonProperty("is_returning_user") Optional<Boolean> isReturningUser,
            @JsonProperty("os_version") Optional<String> osVersion) {
        Utils.checkNotNull(appRealm, "appRealm");
        Utils.checkNotNull(appVersion, "appVersion");
        Utils.checkNotNull(deviceId, "deviceId");
        Utils.checkNotNull(deviceModel, "deviceModel");
        Utils.checkNotNull(deviceType, "deviceType");
        Utils.checkNotNull(ip, "ip");
        Utils.checkNotNull(isReturningUser, "isReturningUser");
        Utils.checkNotNull(osVersion, "osVersion");
        this.appRealm = appRealm;
        this.appVersion = appVersion;
        this.deviceId = deviceId;
        this.deviceModel = deviceModel;
        this.deviceType = deviceType;
        this.ip = ip;
        this.isReturningUser = isReturningUser;
        this.osVersion = osVersion;
    }
    
    public Signals() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The Android SMS Retriever API hash code that identifies your app. This allows you to automatically retrieve and fill the OTP code on Android devices.
     */
    @JsonIgnore
    public Optional<String> appRealm() {
        return appRealm;
    }

    /**
     * The version of your application.
     */
    @JsonIgnore
    public Optional<String> appVersion() {
        return appVersion;
    }

    /**
     * Unique identifier for the user's device. For Android, this corresponds to the `ANDROID_ID` and for iOS, this corresponds to the `identifierForVendor`.
     */
    @JsonIgnore
    public Optional<String> deviceId() {
        return deviceId;
    }

    /**
     * The model of the user's device.
     */
    @JsonIgnore
    public Optional<String> deviceModel() {
        return deviceModel;
    }

    /**
     * The type of device the user is using.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AuthenticationStatusResponseDeviceType> deviceType() {
        return (Optional<AuthenticationStatusResponseDeviceType>) deviceType;
    }

    /**
     * The IP address of the user's device.
     */
    @JsonIgnore
    public Optional<String> ip() {
        return ip;
    }

    /**
     * This signal should do more than just confirm if a user is returning to your app; it should provide a higher level of trust, indicating that the user is genuine. For more details, refer to [Signals](/guides/prevent-fraud#signals).
     */
    @JsonIgnore
    public Optional<Boolean> isReturningUser() {
        return isReturningUser;
    }

    /**
     * The version of the user's device operating system.
     */
    @JsonIgnore
    public Optional<String> osVersion() {
        return osVersion;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The Android SMS Retriever API hash code that identifies your app. This allows you to automatically retrieve and fill the OTP code on Android devices.
     */
    public Signals withAppRealm(String appRealm) {
        Utils.checkNotNull(appRealm, "appRealm");
        this.appRealm = Optional.ofNullable(appRealm);
        return this;
    }

    /**
     * The Android SMS Retriever API hash code that identifies your app. This allows you to automatically retrieve and fill the OTP code on Android devices.
     */
    public Signals withAppRealm(Optional<String> appRealm) {
        Utils.checkNotNull(appRealm, "appRealm");
        this.appRealm = appRealm;
        return this;
    }

    /**
     * The version of your application.
     */
    public Signals withAppVersion(String appVersion) {
        Utils.checkNotNull(appVersion, "appVersion");
        this.appVersion = Optional.ofNullable(appVersion);
        return this;
    }

    /**
     * The version of your application.
     */
    public Signals withAppVersion(Optional<String> appVersion) {
        Utils.checkNotNull(appVersion, "appVersion");
        this.appVersion = appVersion;
        return this;
    }

    /**
     * Unique identifier for the user's device. For Android, this corresponds to the `ANDROID_ID` and for iOS, this corresponds to the `identifierForVendor`.
     */
    public Signals withDeviceId(String deviceId) {
        Utils.checkNotNull(deviceId, "deviceId");
        this.deviceId = Optional.ofNullable(deviceId);
        return this;
    }

    /**
     * Unique identifier for the user's device. For Android, this corresponds to the `ANDROID_ID` and for iOS, this corresponds to the `identifierForVendor`.
     */
    public Signals withDeviceId(Optional<String> deviceId) {
        Utils.checkNotNull(deviceId, "deviceId");
        this.deviceId = deviceId;
        return this;
    }

    /**
     * The model of the user's device.
     */
    public Signals withDeviceModel(String deviceModel) {
        Utils.checkNotNull(deviceModel, "deviceModel");
        this.deviceModel = Optional.ofNullable(deviceModel);
        return this;
    }

    /**
     * The model of the user's device.
     */
    public Signals withDeviceModel(Optional<String> deviceModel) {
        Utils.checkNotNull(deviceModel, "deviceModel");
        this.deviceModel = deviceModel;
        return this;
    }

    /**
     * The type of device the user is using.
     */
    public Signals withDeviceType(AuthenticationStatusResponseDeviceType deviceType) {
        Utils.checkNotNull(deviceType, "deviceType");
        this.deviceType = Optional.ofNullable(deviceType);
        return this;
    }

    /**
     * The type of device the user is using.
     */
    public Signals withDeviceType(Optional<? extends AuthenticationStatusResponseDeviceType> deviceType) {
        Utils.checkNotNull(deviceType, "deviceType");
        this.deviceType = deviceType;
        return this;
    }

    /**
     * The IP address of the user's device.
     */
    public Signals withIp(String ip) {
        Utils.checkNotNull(ip, "ip");
        this.ip = Optional.ofNullable(ip);
        return this;
    }

    /**
     * The IP address of the user's device.
     */
    public Signals withIp(Optional<String> ip) {
        Utils.checkNotNull(ip, "ip");
        this.ip = ip;
        return this;
    }

    /**
     * This signal should do more than just confirm if a user is returning to your app; it should provide a higher level of trust, indicating that the user is genuine. For more details, refer to [Signals](/guides/prevent-fraud#signals).
     */
    public Signals withIsReturningUser(boolean isReturningUser) {
        Utils.checkNotNull(isReturningUser, "isReturningUser");
        this.isReturningUser = Optional.ofNullable(isReturningUser);
        return this;
    }

    /**
     * This signal should do more than just confirm if a user is returning to your app; it should provide a higher level of trust, indicating that the user is genuine. For more details, refer to [Signals](/guides/prevent-fraud#signals).
     */
    public Signals withIsReturningUser(Optional<Boolean> isReturningUser) {
        Utils.checkNotNull(isReturningUser, "isReturningUser");
        this.isReturningUser = isReturningUser;
        return this;
    }

    /**
     * The version of the user's device operating system.
     */
    public Signals withOsVersion(String osVersion) {
        Utils.checkNotNull(osVersion, "osVersion");
        this.osVersion = Optional.ofNullable(osVersion);
        return this;
    }

    /**
     * The version of the user's device operating system.
     */
    public Signals withOsVersion(Optional<String> osVersion) {
        Utils.checkNotNull(osVersion, "osVersion");
        this.osVersion = osVersion;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Signals other = (Signals) o;
        return 
            Objects.deepEquals(this.appRealm, other.appRealm) &&
            Objects.deepEquals(this.appVersion, other.appVersion) &&
            Objects.deepEquals(this.deviceId, other.deviceId) &&
            Objects.deepEquals(this.deviceModel, other.deviceModel) &&
            Objects.deepEquals(this.deviceType, other.deviceType) &&
            Objects.deepEquals(this.ip, other.ip) &&
            Objects.deepEquals(this.isReturningUser, other.isReturningUser) &&
            Objects.deepEquals(this.osVersion, other.osVersion);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            appRealm,
            appVersion,
            deviceId,
            deviceModel,
            deviceType,
            ip,
            isReturningUser,
            osVersion);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Signals.class,
                "appRealm", appRealm,
                "appVersion", appVersion,
                "deviceId", deviceId,
                "deviceModel", deviceModel,
                "deviceType", deviceType,
                "ip", ip,
                "isReturningUser", isReturningUser,
                "osVersion", osVersion);
    }
    
    public final static class Builder {
 
        private Optional<String> appRealm = Optional.empty();
 
        private Optional<String> appVersion = Optional.empty();
 
        private Optional<String> deviceId = Optional.empty();
 
        private Optional<String> deviceModel = Optional.empty();
 
        private Optional<? extends AuthenticationStatusResponseDeviceType> deviceType = Optional.empty();
 
        private Optional<String> ip = Optional.empty();
 
        private Optional<Boolean> isReturningUser = Optional.empty();
 
        private Optional<String> osVersion = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The Android SMS Retriever API hash code that identifies your app. This allows you to automatically retrieve and fill the OTP code on Android devices.
         */
        public Builder appRealm(String appRealm) {
            Utils.checkNotNull(appRealm, "appRealm");
            this.appRealm = Optional.ofNullable(appRealm);
            return this;
        }

        /**
         * The Android SMS Retriever API hash code that identifies your app. This allows you to automatically retrieve and fill the OTP code on Android devices.
         */
        public Builder appRealm(Optional<String> appRealm) {
            Utils.checkNotNull(appRealm, "appRealm");
            this.appRealm = appRealm;
            return this;
        }

        /**
         * The version of your application.
         */
        public Builder appVersion(String appVersion) {
            Utils.checkNotNull(appVersion, "appVersion");
            this.appVersion = Optional.ofNullable(appVersion);
            return this;
        }

        /**
         * The version of your application.
         */
        public Builder appVersion(Optional<String> appVersion) {
            Utils.checkNotNull(appVersion, "appVersion");
            this.appVersion = appVersion;
            return this;
        }

        /**
         * Unique identifier for the user's device. For Android, this corresponds to the `ANDROID_ID` and for iOS, this corresponds to the `identifierForVendor`.
         */
        public Builder deviceId(String deviceId) {
            Utils.checkNotNull(deviceId, "deviceId");
            this.deviceId = Optional.ofNullable(deviceId);
            return this;
        }

        /**
         * Unique identifier for the user's device. For Android, this corresponds to the `ANDROID_ID` and for iOS, this corresponds to the `identifierForVendor`.
         */
        public Builder deviceId(Optional<String> deviceId) {
            Utils.checkNotNull(deviceId, "deviceId");
            this.deviceId = deviceId;
            return this;
        }

        /**
         * The model of the user's device.
         */
        public Builder deviceModel(String deviceModel) {
            Utils.checkNotNull(deviceModel, "deviceModel");
            this.deviceModel = Optional.ofNullable(deviceModel);
            return this;
        }

        /**
         * The model of the user's device.
         */
        public Builder deviceModel(Optional<String> deviceModel) {
            Utils.checkNotNull(deviceModel, "deviceModel");
            this.deviceModel = deviceModel;
            return this;
        }

        /**
         * The type of device the user is using.
         */
        public Builder deviceType(AuthenticationStatusResponseDeviceType deviceType) {
            Utils.checkNotNull(deviceType, "deviceType");
            this.deviceType = Optional.ofNullable(deviceType);
            return this;
        }

        /**
         * The type of device the user is using.
         */
        public Builder deviceType(Optional<? extends AuthenticationStatusResponseDeviceType> deviceType) {
            Utils.checkNotNull(deviceType, "deviceType");
            this.deviceType = deviceType;
            return this;
        }

        /**
         * The IP address of the user's device.
         */
        public Builder ip(String ip) {
            Utils.checkNotNull(ip, "ip");
            this.ip = Optional.ofNullable(ip);
            return this;
        }

        /**
         * The IP address of the user's device.
         */
        public Builder ip(Optional<String> ip) {
            Utils.checkNotNull(ip, "ip");
            this.ip = ip;
            return this;
        }

        /**
         * This signal should do more than just confirm if a user is returning to your app; it should provide a higher level of trust, indicating that the user is genuine. For more details, refer to [Signals](/guides/prevent-fraud#signals).
         */
        public Builder isReturningUser(boolean isReturningUser) {
            Utils.checkNotNull(isReturningUser, "isReturningUser");
            this.isReturningUser = Optional.ofNullable(isReturningUser);
            return this;
        }

        /**
         * This signal should do more than just confirm if a user is returning to your app; it should provide a higher level of trust, indicating that the user is genuine. For more details, refer to [Signals](/guides/prevent-fraud#signals).
         */
        public Builder isReturningUser(Optional<Boolean> isReturningUser) {
            Utils.checkNotNull(isReturningUser, "isReturningUser");
            this.isReturningUser = isReturningUser;
            return this;
        }

        /**
         * The version of the user's device operating system.
         */
        public Builder osVersion(String osVersion) {
            Utils.checkNotNull(osVersion, "osVersion");
            this.osVersion = Optional.ofNullable(osVersion);
            return this;
        }

        /**
         * The version of the user's device operating system.
         */
        public Builder osVersion(Optional<String> osVersion) {
            Utils.checkNotNull(osVersion, "osVersion");
            this.osVersion = osVersion;
            return this;
        }
        
        public Signals build() {
            return new Signals(
                appRealm,
                appVersion,
                deviceId,
                deviceModel,
                deviceType,
                ip,
                isReturningUser,
                osVersion);
        }
    }
}

