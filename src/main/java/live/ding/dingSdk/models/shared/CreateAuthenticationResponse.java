/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package live.ding.dingSdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;
import live.ding.dingSdk.utils.Utils;

/**
 * CreateAuthenticationResponse - A successful response to an authentication creation request.
 */

public class CreateAuthenticationResponse {

    /**
     * A unique identifier for the authentication that you can use on the /check and /retry endpoints.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authentication_uuid")
    private Optional<String> authenticationUuid;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;

    /**
     * The time at which the authentication expires and can no longer be checked or retried.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expires_at")
    private Optional<OffsetDateTime> expiresAt;

    /**
     * The status of the authentication. Possible values are:
     *   * `pending` - The OTP code is being sent.
     *   * `rate_limited` - This user is rate-limited and cannot receive another code.
     *   * `spam_detected` - This attempt is flagged as spam. Go to the dashboard for more details.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends Status> status;

    @JsonCreator
    public CreateAuthenticationResponse(
            @JsonProperty("authentication_uuid") Optional<String> authenticationUuid,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("expires_at") Optional<OffsetDateTime> expiresAt,
            @JsonProperty("status") Optional<? extends Status> status) {
        Utils.checkNotNull(authenticationUuid, "authenticationUuid");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(expiresAt, "expiresAt");
        Utils.checkNotNull(status, "status");
        this.authenticationUuid = authenticationUuid;
        this.createdAt = createdAt;
        this.expiresAt = expiresAt;
        this.status = status;
    }
    
    public CreateAuthenticationResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A unique identifier for the authentication that you can use on the /check and /retry endpoints.
     */
    @JsonIgnore
    public Optional<String> authenticationUuid() {
        return authenticationUuid;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * The time at which the authentication expires and can no longer be checked or retried.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> expiresAt() {
        return expiresAt;
    }

    /**
     * The status of the authentication. Possible values are:
     *   * `pending` - The OTP code is being sent.
     *   * `rate_limited` - This user is rate-limited and cannot receive another code.
     *   * `spam_detected` - This attempt is flagged as spam. Go to the dashboard for more details.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Status> status() {
        return (Optional<Status>) status;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A unique identifier for the authentication that you can use on the /check and /retry endpoints.
     */
    public CreateAuthenticationResponse withAuthenticationUuid(String authenticationUuid) {
        Utils.checkNotNull(authenticationUuid, "authenticationUuid");
        this.authenticationUuid = Optional.ofNullable(authenticationUuid);
        return this;
    }

    /**
     * A unique identifier for the authentication that you can use on the /check and /retry endpoints.
     */
    public CreateAuthenticationResponse withAuthenticationUuid(Optional<String> authenticationUuid) {
        Utils.checkNotNull(authenticationUuid, "authenticationUuid");
        this.authenticationUuid = authenticationUuid;
        return this;
    }

    public CreateAuthenticationResponse withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public CreateAuthenticationResponse withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The time at which the authentication expires and can no longer be checked or retried.
     */
    public CreateAuthenticationResponse withExpiresAt(OffsetDateTime expiresAt) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.expiresAt = Optional.ofNullable(expiresAt);
        return this;
    }

    /**
     * The time at which the authentication expires and can no longer be checked or retried.
     */
    public CreateAuthenticationResponse withExpiresAt(Optional<OffsetDateTime> expiresAt) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.expiresAt = expiresAt;
        return this;
    }

    /**
     * The status of the authentication. Possible values are:
     *   * `pending` - The OTP code is being sent.
     *   * `rate_limited` - This user is rate-limited and cannot receive another code.
     *   * `spam_detected` - This attempt is flagged as spam. Go to the dashboard for more details.
     * 
     */
    public CreateAuthenticationResponse withStatus(Status status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The status of the authentication. Possible values are:
     *   * `pending` - The OTP code is being sent.
     *   * `rate_limited` - This user is rate-limited and cannot receive another code.
     *   * `spam_detected` - This attempt is flagged as spam. Go to the dashboard for more details.
     * 
     */
    public CreateAuthenticationResponse withStatus(Optional<? extends Status> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateAuthenticationResponse other = (CreateAuthenticationResponse) o;
        return 
            Objects.deepEquals(this.authenticationUuid, other.authenticationUuid) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.expiresAt, other.expiresAt) &&
            Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            authenticationUuid,
            createdAt,
            expiresAt,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateAuthenticationResponse.class,
                "authenticationUuid", authenticationUuid,
                "createdAt", createdAt,
                "expiresAt", expiresAt,
                "status", status);
    }
    
    public final static class Builder {
 
        private Optional<String> authenticationUuid = Optional.empty();
 
        private Optional<OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<OffsetDateTime> expiresAt = Optional.empty();
 
        private Optional<? extends Status> status = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier for the authentication that you can use on the /check and /retry endpoints.
         */
        public Builder authenticationUuid(String authenticationUuid) {
            Utils.checkNotNull(authenticationUuid, "authenticationUuid");
            this.authenticationUuid = Optional.ofNullable(authenticationUuid);
            return this;
        }

        /**
         * A unique identifier for the authentication that you can use on the /check and /retry endpoints.
         */
        public Builder authenticationUuid(Optional<String> authenticationUuid) {
            Utils.checkNotNull(authenticationUuid, "authenticationUuid");
            this.authenticationUuid = authenticationUuid;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The time at which the authentication expires and can no longer be checked or retried.
         */
        public Builder expiresAt(OffsetDateTime expiresAt) {
            Utils.checkNotNull(expiresAt, "expiresAt");
            this.expiresAt = Optional.ofNullable(expiresAt);
            return this;
        }

        /**
         * The time at which the authentication expires and can no longer be checked or retried.
         */
        public Builder expiresAt(Optional<OffsetDateTime> expiresAt) {
            Utils.checkNotNull(expiresAt, "expiresAt");
            this.expiresAt = expiresAt;
            return this;
        }

        /**
         * The status of the authentication. Possible values are:
         *   * `pending` - The OTP code is being sent.
         *   * `rate_limited` - This user is rate-limited and cannot receive another code.
         *   * `spam_detected` - This attempt is flagged as spam. Go to the dashboard for more details.
         * 
         */
        public Builder status(Status status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The status of the authentication. Possible values are:
         *   * `pending` - The OTP code is being sent.
         *   * `rate_limited` - This user is rate-limited and cannot receive another code.
         *   * `spam_detected` - This attempt is flagged as spam. Go to the dashboard for more details.
         * 
         */
        public Builder status(Optional<? extends Status> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public CreateAuthenticationResponse build() {
            return new CreateAuthenticationResponse(
                authenticationUuid,
                createdAt,
                expiresAt,
                status);
        }
    }
}

