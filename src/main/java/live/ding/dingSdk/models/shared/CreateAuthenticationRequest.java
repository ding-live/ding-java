/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package live.ding.dingSdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import live.ding.dingSdk.utils.Utils;


public class CreateAuthenticationRequest {

    /**
     * The Android SMS Retriever API hash code that identifies your app. This allows you to automatically retrieve and fill the OTP code on Android devices.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("app_realm")
    private Optional<String> appRealm;

    /**
     * The version of your application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("app_version")
    private Optional<String> appVersion;

    /**
     * A webhook URL to which delivery statuses will be sent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("callback_url")
    private Optional<String> callbackUrl;

    /**
     * A unique, user-defined identifier that will be included in webhook events
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("correlation_id")
    private Optional<String> correlationId;

    /**
     * Your customer UUID, which can be found in the API settings in the dashboard.
     */
    @JsonProperty("customer_uuid")
    private String customerUuid;

    /**
     * Unique identifier for the user's device. For Android, this corresponds to the `ANDROID_ID` and for iOS, this corresponds to the `identifierForVendor`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("device_id")
    private Optional<String> deviceId;

    /**
     * The model of the user's device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("device_model")
    private Optional<String> deviceModel;

    /**
     * The type of device the user is using.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("device_type")
    private Optional<? extends DeviceType> deviceType;

    /**
     * The IP address of the user's device.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip")
    private Optional<String> ip;

    /**
     * Whether the user is a returning user on your app.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_returning_user")
    private Optional<Boolean> isReturningUser;

    /**
     * The version of the user's device operating system.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("os_version")
    private Optional<String> osVersion;

    /**
     * An E.164 formatted phone number to send the OTP to.
     */
    @JsonProperty("phone_number")
    private String phoneNumber;

    /**
     * The template id associated with the message content variant to be sent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template_id")
    private Optional<String> templateId;

    @JsonCreator
    public CreateAuthenticationRequest(
            @JsonProperty("app_realm") Optional<String> appRealm,
            @JsonProperty("app_version") Optional<String> appVersion,
            @JsonProperty("callback_url") Optional<String> callbackUrl,
            @JsonProperty("correlation_id") Optional<String> correlationId,
            @JsonProperty("customer_uuid") String customerUuid,
            @JsonProperty("device_id") Optional<String> deviceId,
            @JsonProperty("device_model") Optional<String> deviceModel,
            @JsonProperty("device_type") Optional<? extends DeviceType> deviceType,
            @JsonProperty("ip") Optional<String> ip,
            @JsonProperty("is_returning_user") Optional<Boolean> isReturningUser,
            @JsonProperty("os_version") Optional<String> osVersion,
            @JsonProperty("phone_number") String phoneNumber,
            @JsonProperty("template_id") Optional<String> templateId) {
        Utils.checkNotNull(appRealm, "appRealm");
        Utils.checkNotNull(appVersion, "appVersion");
        Utils.checkNotNull(callbackUrl, "callbackUrl");
        Utils.checkNotNull(correlationId, "correlationId");
        Utils.checkNotNull(customerUuid, "customerUuid");
        Utils.checkNotNull(deviceId, "deviceId");
        Utils.checkNotNull(deviceModel, "deviceModel");
        Utils.checkNotNull(deviceType, "deviceType");
        Utils.checkNotNull(ip, "ip");
        Utils.checkNotNull(isReturningUser, "isReturningUser");
        Utils.checkNotNull(osVersion, "osVersion");
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        Utils.checkNotNull(templateId, "templateId");
        this.appRealm = appRealm;
        this.appVersion = appVersion;
        this.callbackUrl = callbackUrl;
        this.correlationId = correlationId;
        this.customerUuid = customerUuid;
        this.deviceId = deviceId;
        this.deviceModel = deviceModel;
        this.deviceType = deviceType;
        this.ip = ip;
        this.isReturningUser = isReturningUser;
        this.osVersion = osVersion;
        this.phoneNumber = phoneNumber;
        this.templateId = templateId;
    }
    
    public CreateAuthenticationRequest(
            String customerUuid,
            String phoneNumber) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), customerUuid, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), phoneNumber, Optional.empty());
    }

    /**
     * The Android SMS Retriever API hash code that identifies your app. This allows you to automatically retrieve and fill the OTP code on Android devices.
     */
    @JsonIgnore
    public Optional<String> appRealm() {
        return appRealm;
    }

    /**
     * The version of your application.
     */
    @JsonIgnore
    public Optional<String> appVersion() {
        return appVersion;
    }

    /**
     * A webhook URL to which delivery statuses will be sent.
     */
    @JsonIgnore
    public Optional<String> callbackUrl() {
        return callbackUrl;
    }

    /**
     * A unique, user-defined identifier that will be included in webhook events
     */
    @JsonIgnore
    public Optional<String> correlationId() {
        return correlationId;
    }

    /**
     * Your customer UUID, which can be found in the API settings in the dashboard.
     */
    @JsonIgnore
    public String customerUuid() {
        return customerUuid;
    }

    /**
     * Unique identifier for the user's device. For Android, this corresponds to the `ANDROID_ID` and for iOS, this corresponds to the `identifierForVendor`.
     */
    @JsonIgnore
    public Optional<String> deviceId() {
        return deviceId;
    }

    /**
     * The model of the user's device.
     */
    @JsonIgnore
    public Optional<String> deviceModel() {
        return deviceModel;
    }

    /**
     * The type of device the user is using.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DeviceType> deviceType() {
        return (Optional<DeviceType>) deviceType;
    }

    /**
     * The IP address of the user's device.
     */
    @JsonIgnore
    public Optional<String> ip() {
        return ip;
    }

    /**
     * Whether the user is a returning user on your app.
     */
    @JsonIgnore
    public Optional<Boolean> isReturningUser() {
        return isReturningUser;
    }

    /**
     * The version of the user's device operating system.
     */
    @JsonIgnore
    public Optional<String> osVersion() {
        return osVersion;
    }

    /**
     * An E.164 formatted phone number to send the OTP to.
     */
    @JsonIgnore
    public String phoneNumber() {
        return phoneNumber;
    }

    /**
     * The template id associated with the message content variant to be sent.
     */
    @JsonIgnore
    public Optional<String> templateId() {
        return templateId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The Android SMS Retriever API hash code that identifies your app. This allows you to automatically retrieve and fill the OTP code on Android devices.
     */
    public CreateAuthenticationRequest withAppRealm(String appRealm) {
        Utils.checkNotNull(appRealm, "appRealm");
        this.appRealm = Optional.ofNullable(appRealm);
        return this;
    }

    /**
     * The Android SMS Retriever API hash code that identifies your app. This allows you to automatically retrieve and fill the OTP code on Android devices.
     */
    public CreateAuthenticationRequest withAppRealm(Optional<String> appRealm) {
        Utils.checkNotNull(appRealm, "appRealm");
        this.appRealm = appRealm;
        return this;
    }

    /**
     * The version of your application.
     */
    public CreateAuthenticationRequest withAppVersion(String appVersion) {
        Utils.checkNotNull(appVersion, "appVersion");
        this.appVersion = Optional.ofNullable(appVersion);
        return this;
    }

    /**
     * The version of your application.
     */
    public CreateAuthenticationRequest withAppVersion(Optional<String> appVersion) {
        Utils.checkNotNull(appVersion, "appVersion");
        this.appVersion = appVersion;
        return this;
    }

    /**
     * A webhook URL to which delivery statuses will be sent.
     */
    public CreateAuthenticationRequest withCallbackUrl(String callbackUrl) {
        Utils.checkNotNull(callbackUrl, "callbackUrl");
        this.callbackUrl = Optional.ofNullable(callbackUrl);
        return this;
    }

    /**
     * A webhook URL to which delivery statuses will be sent.
     */
    public CreateAuthenticationRequest withCallbackUrl(Optional<String> callbackUrl) {
        Utils.checkNotNull(callbackUrl, "callbackUrl");
        this.callbackUrl = callbackUrl;
        return this;
    }

    /**
     * A unique, user-defined identifier that will be included in webhook events
     */
    public CreateAuthenticationRequest withCorrelationId(String correlationId) {
        Utils.checkNotNull(correlationId, "correlationId");
        this.correlationId = Optional.ofNullable(correlationId);
        return this;
    }

    /**
     * A unique, user-defined identifier that will be included in webhook events
     */
    public CreateAuthenticationRequest withCorrelationId(Optional<String> correlationId) {
        Utils.checkNotNull(correlationId, "correlationId");
        this.correlationId = correlationId;
        return this;
    }

    /**
     * Your customer UUID, which can be found in the API settings in the dashboard.
     */
    public CreateAuthenticationRequest withCustomerUuid(String customerUuid) {
        Utils.checkNotNull(customerUuid, "customerUuid");
        this.customerUuid = customerUuid;
        return this;
    }

    /**
     * Unique identifier for the user's device. For Android, this corresponds to the `ANDROID_ID` and for iOS, this corresponds to the `identifierForVendor`.
     */
    public CreateAuthenticationRequest withDeviceId(String deviceId) {
        Utils.checkNotNull(deviceId, "deviceId");
        this.deviceId = Optional.ofNullable(deviceId);
        return this;
    }

    /**
     * Unique identifier for the user's device. For Android, this corresponds to the `ANDROID_ID` and for iOS, this corresponds to the `identifierForVendor`.
     */
    public CreateAuthenticationRequest withDeviceId(Optional<String> deviceId) {
        Utils.checkNotNull(deviceId, "deviceId");
        this.deviceId = deviceId;
        return this;
    }

    /**
     * The model of the user's device.
     */
    public CreateAuthenticationRequest withDeviceModel(String deviceModel) {
        Utils.checkNotNull(deviceModel, "deviceModel");
        this.deviceModel = Optional.ofNullable(deviceModel);
        return this;
    }

    /**
     * The model of the user's device.
     */
    public CreateAuthenticationRequest withDeviceModel(Optional<String> deviceModel) {
        Utils.checkNotNull(deviceModel, "deviceModel");
        this.deviceModel = deviceModel;
        return this;
    }

    /**
     * The type of device the user is using.
     */
    public CreateAuthenticationRequest withDeviceType(DeviceType deviceType) {
        Utils.checkNotNull(deviceType, "deviceType");
        this.deviceType = Optional.ofNullable(deviceType);
        return this;
    }

    /**
     * The type of device the user is using.
     */
    public CreateAuthenticationRequest withDeviceType(Optional<? extends DeviceType> deviceType) {
        Utils.checkNotNull(deviceType, "deviceType");
        this.deviceType = deviceType;
        return this;
    }

    /**
     * The IP address of the user's device.
     */
    public CreateAuthenticationRequest withIp(String ip) {
        Utils.checkNotNull(ip, "ip");
        this.ip = Optional.ofNullable(ip);
        return this;
    }

    /**
     * The IP address of the user's device.
     */
    public CreateAuthenticationRequest withIp(Optional<String> ip) {
        Utils.checkNotNull(ip, "ip");
        this.ip = ip;
        return this;
    }

    /**
     * Whether the user is a returning user on your app.
     */
    public CreateAuthenticationRequest withIsReturningUser(boolean isReturningUser) {
        Utils.checkNotNull(isReturningUser, "isReturningUser");
        this.isReturningUser = Optional.ofNullable(isReturningUser);
        return this;
    }

    /**
     * Whether the user is a returning user on your app.
     */
    public CreateAuthenticationRequest withIsReturningUser(Optional<Boolean> isReturningUser) {
        Utils.checkNotNull(isReturningUser, "isReturningUser");
        this.isReturningUser = isReturningUser;
        return this;
    }

    /**
     * The version of the user's device operating system.
     */
    public CreateAuthenticationRequest withOsVersion(String osVersion) {
        Utils.checkNotNull(osVersion, "osVersion");
        this.osVersion = Optional.ofNullable(osVersion);
        return this;
    }

    /**
     * The version of the user's device operating system.
     */
    public CreateAuthenticationRequest withOsVersion(Optional<String> osVersion) {
        Utils.checkNotNull(osVersion, "osVersion");
        this.osVersion = osVersion;
        return this;
    }

    /**
     * An E.164 formatted phone number to send the OTP to.
     */
    public CreateAuthenticationRequest withPhoneNumber(String phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * The template id associated with the message content variant to be sent.
     */
    public CreateAuthenticationRequest withTemplateId(String templateId) {
        Utils.checkNotNull(templateId, "templateId");
        this.templateId = Optional.ofNullable(templateId);
        return this;
    }

    /**
     * The template id associated with the message content variant to be sent.
     */
    public CreateAuthenticationRequest withTemplateId(Optional<String> templateId) {
        Utils.checkNotNull(templateId, "templateId");
        this.templateId = templateId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateAuthenticationRequest other = (CreateAuthenticationRequest) o;
        return 
            Objects.deepEquals(this.appRealm, other.appRealm) &&
            Objects.deepEquals(this.appVersion, other.appVersion) &&
            Objects.deepEquals(this.callbackUrl, other.callbackUrl) &&
            Objects.deepEquals(this.correlationId, other.correlationId) &&
            Objects.deepEquals(this.customerUuid, other.customerUuid) &&
            Objects.deepEquals(this.deviceId, other.deviceId) &&
            Objects.deepEquals(this.deviceModel, other.deviceModel) &&
            Objects.deepEquals(this.deviceType, other.deviceType) &&
            Objects.deepEquals(this.ip, other.ip) &&
            Objects.deepEquals(this.isReturningUser, other.isReturningUser) &&
            Objects.deepEquals(this.osVersion, other.osVersion) &&
            Objects.deepEquals(this.phoneNumber, other.phoneNumber) &&
            Objects.deepEquals(this.templateId, other.templateId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            appRealm,
            appVersion,
            callbackUrl,
            correlationId,
            customerUuid,
            deviceId,
            deviceModel,
            deviceType,
            ip,
            isReturningUser,
            osVersion,
            phoneNumber,
            templateId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateAuthenticationRequest.class,
                "appRealm", appRealm,
                "appVersion", appVersion,
                "callbackUrl", callbackUrl,
                "correlationId", correlationId,
                "customerUuid", customerUuid,
                "deviceId", deviceId,
                "deviceModel", deviceModel,
                "deviceType", deviceType,
                "ip", ip,
                "isReturningUser", isReturningUser,
                "osVersion", osVersion,
                "phoneNumber", phoneNumber,
                "templateId", templateId);
    }
    
    public final static class Builder {
 
        private Optional<String> appRealm = Optional.empty();
 
        private Optional<String> appVersion = Optional.empty();
 
        private Optional<String> callbackUrl = Optional.empty();
 
        private Optional<String> correlationId = Optional.empty();
 
        private String customerUuid;
 
        private Optional<String> deviceId = Optional.empty();
 
        private Optional<String> deviceModel = Optional.empty();
 
        private Optional<? extends DeviceType> deviceType = Optional.empty();
 
        private Optional<String> ip = Optional.empty();
 
        private Optional<Boolean> isReturningUser = Optional.empty();
 
        private Optional<String> osVersion = Optional.empty();
 
        private String phoneNumber;
 
        private Optional<String> templateId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The Android SMS Retriever API hash code that identifies your app. This allows you to automatically retrieve and fill the OTP code on Android devices.
         */
        public Builder appRealm(String appRealm) {
            Utils.checkNotNull(appRealm, "appRealm");
            this.appRealm = Optional.ofNullable(appRealm);
            return this;
        }

        /**
         * The Android SMS Retriever API hash code that identifies your app. This allows you to automatically retrieve and fill the OTP code on Android devices.
         */
        public Builder appRealm(Optional<String> appRealm) {
            Utils.checkNotNull(appRealm, "appRealm");
            this.appRealm = appRealm;
            return this;
        }

        /**
         * The version of your application.
         */
        public Builder appVersion(String appVersion) {
            Utils.checkNotNull(appVersion, "appVersion");
            this.appVersion = Optional.ofNullable(appVersion);
            return this;
        }

        /**
         * The version of your application.
         */
        public Builder appVersion(Optional<String> appVersion) {
            Utils.checkNotNull(appVersion, "appVersion");
            this.appVersion = appVersion;
            return this;
        }

        /**
         * A webhook URL to which delivery statuses will be sent.
         */
        public Builder callbackUrl(String callbackUrl) {
            Utils.checkNotNull(callbackUrl, "callbackUrl");
            this.callbackUrl = Optional.ofNullable(callbackUrl);
            return this;
        }

        /**
         * A webhook URL to which delivery statuses will be sent.
         */
        public Builder callbackUrl(Optional<String> callbackUrl) {
            Utils.checkNotNull(callbackUrl, "callbackUrl");
            this.callbackUrl = callbackUrl;
            return this;
        }

        /**
         * A unique, user-defined identifier that will be included in webhook events
         */
        public Builder correlationId(String correlationId) {
            Utils.checkNotNull(correlationId, "correlationId");
            this.correlationId = Optional.ofNullable(correlationId);
            return this;
        }

        /**
         * A unique, user-defined identifier that will be included in webhook events
         */
        public Builder correlationId(Optional<String> correlationId) {
            Utils.checkNotNull(correlationId, "correlationId");
            this.correlationId = correlationId;
            return this;
        }

        /**
         * Your customer UUID, which can be found in the API settings in the dashboard.
         */
        public Builder customerUuid(String customerUuid) {
            Utils.checkNotNull(customerUuid, "customerUuid");
            this.customerUuid = customerUuid;
            return this;
        }

        /**
         * Unique identifier for the user's device. For Android, this corresponds to the `ANDROID_ID` and for iOS, this corresponds to the `identifierForVendor`.
         */
        public Builder deviceId(String deviceId) {
            Utils.checkNotNull(deviceId, "deviceId");
            this.deviceId = Optional.ofNullable(deviceId);
            return this;
        }

        /**
         * Unique identifier for the user's device. For Android, this corresponds to the `ANDROID_ID` and for iOS, this corresponds to the `identifierForVendor`.
         */
        public Builder deviceId(Optional<String> deviceId) {
            Utils.checkNotNull(deviceId, "deviceId");
            this.deviceId = deviceId;
            return this;
        }

        /**
         * The model of the user's device.
         */
        public Builder deviceModel(String deviceModel) {
            Utils.checkNotNull(deviceModel, "deviceModel");
            this.deviceModel = Optional.ofNullable(deviceModel);
            return this;
        }

        /**
         * The model of the user's device.
         */
        public Builder deviceModel(Optional<String> deviceModel) {
            Utils.checkNotNull(deviceModel, "deviceModel");
            this.deviceModel = deviceModel;
            return this;
        }

        /**
         * The type of device the user is using.
         */
        public Builder deviceType(DeviceType deviceType) {
            Utils.checkNotNull(deviceType, "deviceType");
            this.deviceType = Optional.ofNullable(deviceType);
            return this;
        }

        /**
         * The type of device the user is using.
         */
        public Builder deviceType(Optional<? extends DeviceType> deviceType) {
            Utils.checkNotNull(deviceType, "deviceType");
            this.deviceType = deviceType;
            return this;
        }

        /**
         * The IP address of the user's device.
         */
        public Builder ip(String ip) {
            Utils.checkNotNull(ip, "ip");
            this.ip = Optional.ofNullable(ip);
            return this;
        }

        /**
         * The IP address of the user's device.
         */
        public Builder ip(Optional<String> ip) {
            Utils.checkNotNull(ip, "ip");
            this.ip = ip;
            return this;
        }

        /**
         * Whether the user is a returning user on your app.
         */
        public Builder isReturningUser(boolean isReturningUser) {
            Utils.checkNotNull(isReturningUser, "isReturningUser");
            this.isReturningUser = Optional.ofNullable(isReturningUser);
            return this;
        }

        /**
         * Whether the user is a returning user on your app.
         */
        public Builder isReturningUser(Optional<Boolean> isReturningUser) {
            Utils.checkNotNull(isReturningUser, "isReturningUser");
            this.isReturningUser = isReturningUser;
            return this;
        }

        /**
         * The version of the user's device operating system.
         */
        public Builder osVersion(String osVersion) {
            Utils.checkNotNull(osVersion, "osVersion");
            this.osVersion = Optional.ofNullable(osVersion);
            return this;
        }

        /**
         * The version of the user's device operating system.
         */
        public Builder osVersion(Optional<String> osVersion) {
            Utils.checkNotNull(osVersion, "osVersion");
            this.osVersion = osVersion;
            return this;
        }

        /**
         * An E.164 formatted phone number to send the OTP to.
         */
        public Builder phoneNumber(String phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = phoneNumber;
            return this;
        }

        /**
         * The template id associated with the message content variant to be sent.
         */
        public Builder templateId(String templateId) {
            Utils.checkNotNull(templateId, "templateId");
            this.templateId = Optional.ofNullable(templateId);
            return this;
        }

        /**
         * The template id associated with the message content variant to be sent.
         */
        public Builder templateId(Optional<String> templateId) {
            Utils.checkNotNull(templateId, "templateId");
            this.templateId = templateId;
            return this;
        }
        
        public CreateAuthenticationRequest build() {
            return new CreateAuthenticationRequest(
                appRealm,
                appVersion,
                callbackUrl,
                correlationId,
                customerUuid,
                deviceId,
                deviceModel,
                deviceType,
                ip,
                isReturningUser,
                osVersion,
                phoneNumber,
                templateId);
        }
    }
}

