/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package live.ding.dingSdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;
import live.ding.dingSdk.utils.Utils;


public class Attempt {

    /**
     * The attempt number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attempt_number")
    private Optional<Long> attemptNumber;

    /**
     * The capability of the attempt.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("capability")
    private Optional<? extends Capability> capability;

    /**
     * The content of the attempt.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content")
    private Optional<String> content;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;

    /**
     * The ID of the attempt.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * The sender ID of the attempt.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sender_id")
    private Optional<String> senderId;

    /**
     * The status of the attempt. Possible values are:
     *   * `pending` - The attempt is pending.
     *   * `delivered` - The attempt was delivered.
     *   * `failed` - The attempt failed.
     *   * `rate_limited` - The authentication was rate limited and cannot be retried.
     *   * `expired` - The authentication has expired and cannot be retried.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends AuthenticationStatusResponseSchemasStatus> status;

    /**
     * The type of the event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends Type> type;

    @JsonCreator
    public Attempt(
            @JsonProperty("attempt_number") Optional<Long> attemptNumber,
            @JsonProperty("capability") Optional<? extends Capability> capability,
            @JsonProperty("content") Optional<String> content,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("sender_id") Optional<String> senderId,
            @JsonProperty("status") Optional<? extends AuthenticationStatusResponseSchemasStatus> status,
            @JsonProperty("type") Optional<? extends Type> type) {
        Utils.checkNotNull(attemptNumber, "attemptNumber");
        Utils.checkNotNull(capability, "capability");
        Utils.checkNotNull(content, "content");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(senderId, "senderId");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(type, "type");
        this.attemptNumber = attemptNumber;
        this.capability = capability;
        this.content = content;
        this.createdAt = createdAt;
        this.id = id;
        this.senderId = senderId;
        this.status = status;
        this.type = type;
    }
    
    public Attempt() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The attempt number.
     */
    @JsonIgnore
    public Optional<Long> attemptNumber() {
        return attemptNumber;
    }

    /**
     * The capability of the attempt.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Capability> capability() {
        return (Optional<Capability>) capability;
    }

    /**
     * The content of the attempt.
     */
    @JsonIgnore
    public Optional<String> content() {
        return content;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * The ID of the attempt.
     */
    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * The sender ID of the attempt.
     */
    @JsonIgnore
    public Optional<String> senderId() {
        return senderId;
    }

    /**
     * The status of the attempt. Possible values are:
     *   * `pending` - The attempt is pending.
     *   * `delivered` - The attempt was delivered.
     *   * `failed` - The attempt failed.
     *   * `rate_limited` - The authentication was rate limited and cannot be retried.
     *   * `expired` - The authentication has expired and cannot be retried.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AuthenticationStatusResponseSchemasStatus> status() {
        return (Optional<AuthenticationStatusResponseSchemasStatus>) status;
    }

    /**
     * The type of the event.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Type> type() {
        return (Optional<Type>) type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The attempt number.
     */
    public Attempt withAttemptNumber(long attemptNumber) {
        Utils.checkNotNull(attemptNumber, "attemptNumber");
        this.attemptNumber = Optional.ofNullable(attemptNumber);
        return this;
    }

    /**
     * The attempt number.
     */
    public Attempt withAttemptNumber(Optional<Long> attemptNumber) {
        Utils.checkNotNull(attemptNumber, "attemptNumber");
        this.attemptNumber = attemptNumber;
        return this;
    }

    /**
     * The capability of the attempt.
     */
    public Attempt withCapability(Capability capability) {
        Utils.checkNotNull(capability, "capability");
        this.capability = Optional.ofNullable(capability);
        return this;
    }

    /**
     * The capability of the attempt.
     */
    public Attempt withCapability(Optional<? extends Capability> capability) {
        Utils.checkNotNull(capability, "capability");
        this.capability = capability;
        return this;
    }

    /**
     * The content of the attempt.
     */
    public Attempt withContent(String content) {
        Utils.checkNotNull(content, "content");
        this.content = Optional.ofNullable(content);
        return this;
    }

    /**
     * The content of the attempt.
     */
    public Attempt withContent(Optional<String> content) {
        Utils.checkNotNull(content, "content");
        this.content = content;
        return this;
    }

    public Attempt withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public Attempt withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * The ID of the attempt.
     */
    public Attempt withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The ID of the attempt.
     */
    public Attempt withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The sender ID of the attempt.
     */
    public Attempt withSenderId(String senderId) {
        Utils.checkNotNull(senderId, "senderId");
        this.senderId = Optional.ofNullable(senderId);
        return this;
    }

    /**
     * The sender ID of the attempt.
     */
    public Attempt withSenderId(Optional<String> senderId) {
        Utils.checkNotNull(senderId, "senderId");
        this.senderId = senderId;
        return this;
    }

    /**
     * The status of the attempt. Possible values are:
     *   * `pending` - The attempt is pending.
     *   * `delivered` - The attempt was delivered.
     *   * `failed` - The attempt failed.
     *   * `rate_limited` - The authentication was rate limited and cannot be retried.
     *   * `expired` - The authentication has expired and cannot be retried.
     * 
     */
    public Attempt withStatus(AuthenticationStatusResponseSchemasStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The status of the attempt. Possible values are:
     *   * `pending` - The attempt is pending.
     *   * `delivered` - The attempt was delivered.
     *   * `failed` - The attempt failed.
     *   * `rate_limited` - The authentication was rate limited and cannot be retried.
     *   * `expired` - The authentication has expired and cannot be retried.
     * 
     */
    public Attempt withStatus(Optional<? extends AuthenticationStatusResponseSchemasStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The type of the event.
     */
    public Attempt withType(Type type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * The type of the event.
     */
    public Attempt withType(Optional<? extends Type> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Attempt other = (Attempt) o;
        return 
            Objects.deepEquals(this.attemptNumber, other.attemptNumber) &&
            Objects.deepEquals(this.capability, other.capability) &&
            Objects.deepEquals(this.content, other.content) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.senderId, other.senderId) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            attemptNumber,
            capability,
            content,
            createdAt,
            id,
            senderId,
            status,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Attempt.class,
                "attemptNumber", attemptNumber,
                "capability", capability,
                "content", content,
                "createdAt", createdAt,
                "id", id,
                "senderId", senderId,
                "status", status,
                "type", type);
    }
    
    public final static class Builder {
 
        private Optional<Long> attemptNumber = Optional.empty();
 
        private Optional<? extends Capability> capability = Optional.empty();
 
        private Optional<String> content = Optional.empty();
 
        private Optional<OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> senderId = Optional.empty();
 
        private Optional<? extends AuthenticationStatusResponseSchemasStatus> status = Optional.empty();
 
        private Optional<? extends Type> type = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The attempt number.
         */
        public Builder attemptNumber(long attemptNumber) {
            Utils.checkNotNull(attemptNumber, "attemptNumber");
            this.attemptNumber = Optional.ofNullable(attemptNumber);
            return this;
        }

        /**
         * The attempt number.
         */
        public Builder attemptNumber(Optional<Long> attemptNumber) {
            Utils.checkNotNull(attemptNumber, "attemptNumber");
            this.attemptNumber = attemptNumber;
            return this;
        }

        /**
         * The capability of the attempt.
         */
        public Builder capability(Capability capability) {
            Utils.checkNotNull(capability, "capability");
            this.capability = Optional.ofNullable(capability);
            return this;
        }

        /**
         * The capability of the attempt.
         */
        public Builder capability(Optional<? extends Capability> capability) {
            Utils.checkNotNull(capability, "capability");
            this.capability = capability;
            return this;
        }

        /**
         * The content of the attempt.
         */
        public Builder content(String content) {
            Utils.checkNotNull(content, "content");
            this.content = Optional.ofNullable(content);
            return this;
        }

        /**
         * The content of the attempt.
         */
        public Builder content(Optional<String> content) {
            Utils.checkNotNull(content, "content");
            this.content = content;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The ID of the attempt.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The ID of the attempt.
         */
        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The sender ID of the attempt.
         */
        public Builder senderId(String senderId) {
            Utils.checkNotNull(senderId, "senderId");
            this.senderId = Optional.ofNullable(senderId);
            return this;
        }

        /**
         * The sender ID of the attempt.
         */
        public Builder senderId(Optional<String> senderId) {
            Utils.checkNotNull(senderId, "senderId");
            this.senderId = senderId;
            return this;
        }

        /**
         * The status of the attempt. Possible values are:
         *   * `pending` - The attempt is pending.
         *   * `delivered` - The attempt was delivered.
         *   * `failed` - The attempt failed.
         *   * `rate_limited` - The authentication was rate limited and cannot be retried.
         *   * `expired` - The authentication has expired and cannot be retried.
         * 
         */
        public Builder status(AuthenticationStatusResponseSchemasStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The status of the attempt. Possible values are:
         *   * `pending` - The attempt is pending.
         *   * `delivered` - The attempt was delivered.
         *   * `failed` - The attempt failed.
         *   * `rate_limited` - The authentication was rate limited and cannot be retried.
         *   * `expired` - The authentication has expired and cannot be retried.
         * 
         */
        public Builder status(Optional<? extends AuthenticationStatusResponseSchemasStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The type of the event.
         */
        public Builder type(Type type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * The type of the event.
         */
        public Builder type(Optional<? extends Type> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public Attempt build() {
            return new Attempt(
                attemptNumber,
                capability,
                content,
                createdAt,
                id,
                senderId,
                status,
                type);
        }
    }
}

