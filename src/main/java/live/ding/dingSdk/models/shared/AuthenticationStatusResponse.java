/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package live.ding.dingSdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import live.ding.dingSdk.utils.Utils;


public class AuthenticationStatusResponse {

    /**
     * A unique, user-defined identifier that will be included in webhook events.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("correlation_id")
    private Optional<String> correlationId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;

    /**
     * Represents a collection of events that occur during the authentication process. Each event captures specific actions and outcomes related to the authentication attempts, checks, delivery statuses, and balance updates. The array can contain different types of events, each with its own structure and properties.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("events")
    private Optional<? extends List<Events>> events;

    /**
     * An E.164 formatted phone number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_number")
    private Optional<String> phoneNumber;

    /**
     * [Signals](/guides/prevent-fraud#signals) are data points used to distinguish between fraudulent and legitimate users.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("signals")
    private Optional<? extends Signals> signals;

    /**
     * The template id associated with the message content variant to be sent.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template_id")
    private Optional<String> templateId;

    /**
     * The UUID of the corresponding authentication.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uuid")
    private Optional<String> uuid;

    @JsonCreator
    public AuthenticationStatusResponse(
            @JsonProperty("correlation_id") Optional<String> correlationId,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("events") Optional<? extends List<Events>> events,
            @JsonProperty("phone_number") Optional<String> phoneNumber,
            @JsonProperty("signals") Optional<? extends Signals> signals,
            @JsonProperty("template_id") Optional<String> templateId,
            @JsonProperty("uuid") Optional<String> uuid) {
        Utils.checkNotNull(correlationId, "correlationId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(events, "events");
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        Utils.checkNotNull(signals, "signals");
        Utils.checkNotNull(templateId, "templateId");
        Utils.checkNotNull(uuid, "uuid");
        this.correlationId = correlationId;
        this.createdAt = createdAt;
        this.events = events;
        this.phoneNumber = phoneNumber;
        this.signals = signals;
        this.templateId = templateId;
        this.uuid = uuid;
    }
    
    public AuthenticationStatusResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A unique, user-defined identifier that will be included in webhook events.
     */
    @JsonIgnore
    public Optional<String> correlationId() {
        return correlationId;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * Represents a collection of events that occur during the authentication process. Each event captures specific actions and outcomes related to the authentication attempts, checks, delivery statuses, and balance updates. The array can contain different types of events, each with its own structure and properties.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Events>> events() {
        return (Optional<List<Events>>) events;
    }

    /**
     * An E.164 formatted phone number.
     */
    @JsonIgnore
    public Optional<String> phoneNumber() {
        return phoneNumber;
    }

    /**
     * [Signals](/guides/prevent-fraud#signals) are data points used to distinguish between fraudulent and legitimate users.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Signals> signals() {
        return (Optional<Signals>) signals;
    }

    /**
     * The template id associated with the message content variant to be sent.
     */
    @JsonIgnore
    public Optional<String> templateId() {
        return templateId;
    }

    /**
     * The UUID of the corresponding authentication.
     */
    @JsonIgnore
    public Optional<String> uuid() {
        return uuid;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A unique, user-defined identifier that will be included in webhook events.
     */
    public AuthenticationStatusResponse withCorrelationId(String correlationId) {
        Utils.checkNotNull(correlationId, "correlationId");
        this.correlationId = Optional.ofNullable(correlationId);
        return this;
    }

    /**
     * A unique, user-defined identifier that will be included in webhook events.
     */
    public AuthenticationStatusResponse withCorrelationId(Optional<String> correlationId) {
        Utils.checkNotNull(correlationId, "correlationId");
        this.correlationId = correlationId;
        return this;
    }

    public AuthenticationStatusResponse withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public AuthenticationStatusResponse withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Represents a collection of events that occur during the authentication process. Each event captures specific actions and outcomes related to the authentication attempts, checks, delivery statuses, and balance updates. The array can contain different types of events, each with its own structure and properties.
     */
    public AuthenticationStatusResponse withEvents(List<Events> events) {
        Utils.checkNotNull(events, "events");
        this.events = Optional.ofNullable(events);
        return this;
    }

    /**
     * Represents a collection of events that occur during the authentication process. Each event captures specific actions and outcomes related to the authentication attempts, checks, delivery statuses, and balance updates. The array can contain different types of events, each with its own structure and properties.
     */
    public AuthenticationStatusResponse withEvents(Optional<? extends List<Events>> events) {
        Utils.checkNotNull(events, "events");
        this.events = events;
        return this;
    }

    /**
     * An E.164 formatted phone number.
     */
    public AuthenticationStatusResponse withPhoneNumber(String phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = Optional.ofNullable(phoneNumber);
        return this;
    }

    /**
     * An E.164 formatted phone number.
     */
    public AuthenticationStatusResponse withPhoneNumber(Optional<String> phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * [Signals](/guides/prevent-fraud#signals) are data points used to distinguish between fraudulent and legitimate users.
     */
    public AuthenticationStatusResponse withSignals(Signals signals) {
        Utils.checkNotNull(signals, "signals");
        this.signals = Optional.ofNullable(signals);
        return this;
    }

    /**
     * [Signals](/guides/prevent-fraud#signals) are data points used to distinguish between fraudulent and legitimate users.
     */
    public AuthenticationStatusResponse withSignals(Optional<? extends Signals> signals) {
        Utils.checkNotNull(signals, "signals");
        this.signals = signals;
        return this;
    }

    /**
     * The template id associated with the message content variant to be sent.
     */
    public AuthenticationStatusResponse withTemplateId(String templateId) {
        Utils.checkNotNull(templateId, "templateId");
        this.templateId = Optional.ofNullable(templateId);
        return this;
    }

    /**
     * The template id associated with the message content variant to be sent.
     */
    public AuthenticationStatusResponse withTemplateId(Optional<String> templateId) {
        Utils.checkNotNull(templateId, "templateId");
        this.templateId = templateId;
        return this;
    }

    /**
     * The UUID of the corresponding authentication.
     */
    public AuthenticationStatusResponse withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = Optional.ofNullable(uuid);
        return this;
    }

    /**
     * The UUID of the corresponding authentication.
     */
    public AuthenticationStatusResponse withUuid(Optional<String> uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthenticationStatusResponse other = (AuthenticationStatusResponse) o;
        return 
            Objects.deepEquals(this.correlationId, other.correlationId) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.events, other.events) &&
            Objects.deepEquals(this.phoneNumber, other.phoneNumber) &&
            Objects.deepEquals(this.signals, other.signals) &&
            Objects.deepEquals(this.templateId, other.templateId) &&
            Objects.deepEquals(this.uuid, other.uuid);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            correlationId,
            createdAt,
            events,
            phoneNumber,
            signals,
            templateId,
            uuid);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuthenticationStatusResponse.class,
                "correlationId", correlationId,
                "createdAt", createdAt,
                "events", events,
                "phoneNumber", phoneNumber,
                "signals", signals,
                "templateId", templateId,
                "uuid", uuid);
    }
    
    public final static class Builder {
 
        private Optional<String> correlationId = Optional.empty();
 
        private Optional<OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<? extends List<Events>> events = Optional.empty();
 
        private Optional<String> phoneNumber = Optional.empty();
 
        private Optional<? extends Signals> signals = Optional.empty();
 
        private Optional<String> templateId = Optional.empty();
 
        private Optional<String> uuid = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique, user-defined identifier that will be included in webhook events.
         */
        public Builder correlationId(String correlationId) {
            Utils.checkNotNull(correlationId, "correlationId");
            this.correlationId = Optional.ofNullable(correlationId);
            return this;
        }

        /**
         * A unique, user-defined identifier that will be included in webhook events.
         */
        public Builder correlationId(Optional<String> correlationId) {
            Utils.checkNotNull(correlationId, "correlationId");
            this.correlationId = correlationId;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Represents a collection of events that occur during the authentication process. Each event captures specific actions and outcomes related to the authentication attempts, checks, delivery statuses, and balance updates. The array can contain different types of events, each with its own structure and properties.
         */
        public Builder events(List<Events> events) {
            Utils.checkNotNull(events, "events");
            this.events = Optional.ofNullable(events);
            return this;
        }

        /**
         * Represents a collection of events that occur during the authentication process. Each event captures specific actions and outcomes related to the authentication attempts, checks, delivery statuses, and balance updates. The array can contain different types of events, each with its own structure and properties.
         */
        public Builder events(Optional<? extends List<Events>> events) {
            Utils.checkNotNull(events, "events");
            this.events = events;
            return this;
        }

        /**
         * An E.164 formatted phone number.
         */
        public Builder phoneNumber(String phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        /**
         * An E.164 formatted phone number.
         */
        public Builder phoneNumber(Optional<String> phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = phoneNumber;
            return this;
        }

        /**
         * [Signals](/guides/prevent-fraud#signals) are data points used to distinguish between fraudulent and legitimate users.
         */
        public Builder signals(Signals signals) {
            Utils.checkNotNull(signals, "signals");
            this.signals = Optional.ofNullable(signals);
            return this;
        }

        /**
         * [Signals](/guides/prevent-fraud#signals) are data points used to distinguish between fraudulent and legitimate users.
         */
        public Builder signals(Optional<? extends Signals> signals) {
            Utils.checkNotNull(signals, "signals");
            this.signals = signals;
            return this;
        }

        /**
         * The template id associated with the message content variant to be sent.
         */
        public Builder templateId(String templateId) {
            Utils.checkNotNull(templateId, "templateId");
            this.templateId = Optional.ofNullable(templateId);
            return this;
        }

        /**
         * The template id associated with the message content variant to be sent.
         */
        public Builder templateId(Optional<String> templateId) {
            Utils.checkNotNull(templateId, "templateId");
            this.templateId = templateId;
            return this;
        }

        /**
         * The UUID of the corresponding authentication.
         */
        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = Optional.ofNullable(uuid);
            return this;
        }

        /**
         * The UUID of the corresponding authentication.
         */
        public Builder uuid(Optional<String> uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }
        
        public AuthenticationStatusResponse build() {
            return new AuthenticationStatusResponse(
                correlationId,
                createdAt,
                events,
                phoneNumber,
                signals,
                templateId,
                uuid);
        }
    }
}

