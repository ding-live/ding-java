/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package live.ding.dingSdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import live.ding.dingSdk.utils.Utils;


public class LookupResponse {

    /**
     * The carrier of the phone number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("carrier")
    private Optional<String> carrier;

    /**
     * The ISO 3166-1 alpha-2 country code of the phone number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country_code")
    private Optional<String> countryCode;

    /**
     * The type of phone line.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("line_type")
    private Optional<? extends LineType> lineType;

    /**
     * The mobile country code of the phone number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mcc")
    private Optional<String> mcc;

    /**
     * The mobile network code of the phone number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mnc")
    private Optional<String> mnc;

    /**
     * Whether the phone number has been ported.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number_ported")
    private Optional<Boolean> numberPorted;

    /**
     * An E.164 formatted phone number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_number")
    private Optional<String> phoneNumber;

    @JsonCreator
    public LookupResponse(
            @JsonProperty("carrier") Optional<String> carrier,
            @JsonProperty("country_code") Optional<String> countryCode,
            @JsonProperty("line_type") Optional<? extends LineType> lineType,
            @JsonProperty("mcc") Optional<String> mcc,
            @JsonProperty("mnc") Optional<String> mnc,
            @JsonProperty("number_ported") Optional<Boolean> numberPorted,
            @JsonProperty("phone_number") Optional<String> phoneNumber) {
        Utils.checkNotNull(carrier, "carrier");
        Utils.checkNotNull(countryCode, "countryCode");
        Utils.checkNotNull(lineType, "lineType");
        Utils.checkNotNull(mcc, "mcc");
        Utils.checkNotNull(mnc, "mnc");
        Utils.checkNotNull(numberPorted, "numberPorted");
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.carrier = carrier;
        this.countryCode = countryCode;
        this.lineType = lineType;
        this.mcc = mcc;
        this.mnc = mnc;
        this.numberPorted = numberPorted;
        this.phoneNumber = phoneNumber;
    }
    
    public LookupResponse() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The carrier of the phone number.
     */
    @JsonIgnore
    public Optional<String> carrier() {
        return carrier;
    }

    /**
     * The ISO 3166-1 alpha-2 country code of the phone number.
     */
    @JsonIgnore
    public Optional<String> countryCode() {
        return countryCode;
    }

    /**
     * The type of phone line.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<LineType> lineType() {
        return (Optional<LineType>) lineType;
    }

    /**
     * The mobile country code of the phone number.
     */
    @JsonIgnore
    public Optional<String> mcc() {
        return mcc;
    }

    /**
     * The mobile network code of the phone number.
     */
    @JsonIgnore
    public Optional<String> mnc() {
        return mnc;
    }

    /**
     * Whether the phone number has been ported.
     */
    @JsonIgnore
    public Optional<Boolean> numberPorted() {
        return numberPorted;
    }

    /**
     * An E.164 formatted phone number.
     */
    @JsonIgnore
    public Optional<String> phoneNumber() {
        return phoneNumber;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The carrier of the phone number.
     */
    public LookupResponse withCarrier(String carrier) {
        Utils.checkNotNull(carrier, "carrier");
        this.carrier = Optional.ofNullable(carrier);
        return this;
    }

    /**
     * The carrier of the phone number.
     */
    public LookupResponse withCarrier(Optional<String> carrier) {
        Utils.checkNotNull(carrier, "carrier");
        this.carrier = carrier;
        return this;
    }

    /**
     * The ISO 3166-1 alpha-2 country code of the phone number.
     */
    public LookupResponse withCountryCode(String countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = Optional.ofNullable(countryCode);
        return this;
    }

    /**
     * The ISO 3166-1 alpha-2 country code of the phone number.
     */
    public LookupResponse withCountryCode(Optional<String> countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = countryCode;
        return this;
    }

    /**
     * The type of phone line.
     */
    public LookupResponse withLineType(LineType lineType) {
        Utils.checkNotNull(lineType, "lineType");
        this.lineType = Optional.ofNullable(lineType);
        return this;
    }

    /**
     * The type of phone line.
     */
    public LookupResponse withLineType(Optional<? extends LineType> lineType) {
        Utils.checkNotNull(lineType, "lineType");
        this.lineType = lineType;
        return this;
    }

    /**
     * The mobile country code of the phone number.
     */
    public LookupResponse withMcc(String mcc) {
        Utils.checkNotNull(mcc, "mcc");
        this.mcc = Optional.ofNullable(mcc);
        return this;
    }

    /**
     * The mobile country code of the phone number.
     */
    public LookupResponse withMcc(Optional<String> mcc) {
        Utils.checkNotNull(mcc, "mcc");
        this.mcc = mcc;
        return this;
    }

    /**
     * The mobile network code of the phone number.
     */
    public LookupResponse withMnc(String mnc) {
        Utils.checkNotNull(mnc, "mnc");
        this.mnc = Optional.ofNullable(mnc);
        return this;
    }

    /**
     * The mobile network code of the phone number.
     */
    public LookupResponse withMnc(Optional<String> mnc) {
        Utils.checkNotNull(mnc, "mnc");
        this.mnc = mnc;
        return this;
    }

    /**
     * Whether the phone number has been ported.
     */
    public LookupResponse withNumberPorted(boolean numberPorted) {
        Utils.checkNotNull(numberPorted, "numberPorted");
        this.numberPorted = Optional.ofNullable(numberPorted);
        return this;
    }

    /**
     * Whether the phone number has been ported.
     */
    public LookupResponse withNumberPorted(Optional<Boolean> numberPorted) {
        Utils.checkNotNull(numberPorted, "numberPorted");
        this.numberPorted = numberPorted;
        return this;
    }

    /**
     * An E.164 formatted phone number.
     */
    public LookupResponse withPhoneNumber(String phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = Optional.ofNullable(phoneNumber);
        return this;
    }

    /**
     * An E.164 formatted phone number.
     */
    public LookupResponse withPhoneNumber(Optional<String> phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = phoneNumber;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LookupResponse other = (LookupResponse) o;
        return 
            Objects.deepEquals(this.carrier, other.carrier) &&
            Objects.deepEquals(this.countryCode, other.countryCode) &&
            Objects.deepEquals(this.lineType, other.lineType) &&
            Objects.deepEquals(this.mcc, other.mcc) &&
            Objects.deepEquals(this.mnc, other.mnc) &&
            Objects.deepEquals(this.numberPorted, other.numberPorted) &&
            Objects.deepEquals(this.phoneNumber, other.phoneNumber);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            carrier,
            countryCode,
            lineType,
            mcc,
            mnc,
            numberPorted,
            phoneNumber);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LookupResponse.class,
                "carrier", carrier,
                "countryCode", countryCode,
                "lineType", lineType,
                "mcc", mcc,
                "mnc", mnc,
                "numberPorted", numberPorted,
                "phoneNumber", phoneNumber);
    }
    
    public final static class Builder {
 
        private Optional<String> carrier = Optional.empty();
 
        private Optional<String> countryCode = Optional.empty();
 
        private Optional<? extends LineType> lineType = Optional.empty();
 
        private Optional<String> mcc = Optional.empty();
 
        private Optional<String> mnc = Optional.empty();
 
        private Optional<Boolean> numberPorted = Optional.empty();
 
        private Optional<String> phoneNumber = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The carrier of the phone number.
         */
        public Builder carrier(String carrier) {
            Utils.checkNotNull(carrier, "carrier");
            this.carrier = Optional.ofNullable(carrier);
            return this;
        }

        /**
         * The carrier of the phone number.
         */
        public Builder carrier(Optional<String> carrier) {
            Utils.checkNotNull(carrier, "carrier");
            this.carrier = carrier;
            return this;
        }

        /**
         * The ISO 3166-1 alpha-2 country code of the phone number.
         */
        public Builder countryCode(String countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = Optional.ofNullable(countryCode);
            return this;
        }

        /**
         * The ISO 3166-1 alpha-2 country code of the phone number.
         */
        public Builder countryCode(Optional<String> countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = countryCode;
            return this;
        }

        /**
         * The type of phone line.
         */
        public Builder lineType(LineType lineType) {
            Utils.checkNotNull(lineType, "lineType");
            this.lineType = Optional.ofNullable(lineType);
            return this;
        }

        /**
         * The type of phone line.
         */
        public Builder lineType(Optional<? extends LineType> lineType) {
            Utils.checkNotNull(lineType, "lineType");
            this.lineType = lineType;
            return this;
        }

        /**
         * The mobile country code of the phone number.
         */
        public Builder mcc(String mcc) {
            Utils.checkNotNull(mcc, "mcc");
            this.mcc = Optional.ofNullable(mcc);
            return this;
        }

        /**
         * The mobile country code of the phone number.
         */
        public Builder mcc(Optional<String> mcc) {
            Utils.checkNotNull(mcc, "mcc");
            this.mcc = mcc;
            return this;
        }

        /**
         * The mobile network code of the phone number.
         */
        public Builder mnc(String mnc) {
            Utils.checkNotNull(mnc, "mnc");
            this.mnc = Optional.ofNullable(mnc);
            return this;
        }

        /**
         * The mobile network code of the phone number.
         */
        public Builder mnc(Optional<String> mnc) {
            Utils.checkNotNull(mnc, "mnc");
            this.mnc = mnc;
            return this;
        }

        /**
         * Whether the phone number has been ported.
         */
        public Builder numberPorted(boolean numberPorted) {
            Utils.checkNotNull(numberPorted, "numberPorted");
            this.numberPorted = Optional.ofNullable(numberPorted);
            return this;
        }

        /**
         * Whether the phone number has been ported.
         */
        public Builder numberPorted(Optional<Boolean> numberPorted) {
            Utils.checkNotNull(numberPorted, "numberPorted");
            this.numberPorted = numberPorted;
            return this;
        }

        /**
         * An E.164 formatted phone number.
         */
        public Builder phoneNumber(String phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        /**
         * An E.164 formatted phone number.
         */
        public Builder phoneNumber(Optional<String> phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = phoneNumber;
            return this;
        }
        
        public LookupResponse build() {
            return new LookupResponse(
                carrier,
                countryCode,
                lineType,
                mcc,
                mnc,
                numberPorted,
                phoneNumber);
        }
    }
}

