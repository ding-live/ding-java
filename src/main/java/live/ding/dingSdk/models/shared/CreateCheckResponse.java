/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package live.ding.dingSdk.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import live.ding.dingSdk.utils.Utils;


public class CreateCheckResponse {

    /**
     * The UUID of the corresponding authentication.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authentication_uuid")
    private Optional<String> authenticationUuid;

    /**
     * The status of the check. Possible values are:
     *   * `valid` - The code is valid.
     *   * `invalid` - The code is invalid.
     *   * `without_attempt` - No attempt was sent yet, so a check cannot be completed.
     *   * `rate_limited` - The authentication was rate limited and cannot be checked.
     *   * `already_validated` - The authentication has already been validated.
     *   * `expired_auth` - The authentication has expired and cannot be checked.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends CreateCheckResponseStatus> status;

    @JsonCreator
    public CreateCheckResponse(
            @JsonProperty("authentication_uuid") Optional<String> authenticationUuid,
            @JsonProperty("status") Optional<? extends CreateCheckResponseStatus> status) {
        Utils.checkNotNull(authenticationUuid, "authenticationUuid");
        Utils.checkNotNull(status, "status");
        this.authenticationUuid = authenticationUuid;
        this.status = status;
    }
    
    public CreateCheckResponse() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The UUID of the corresponding authentication.
     */
    @JsonIgnore
    public Optional<String> authenticationUuid() {
        return authenticationUuid;
    }

    /**
     * The status of the check. Possible values are:
     *   * `valid` - The code is valid.
     *   * `invalid` - The code is invalid.
     *   * `without_attempt` - No attempt was sent yet, so a check cannot be completed.
     *   * `rate_limited` - The authentication was rate limited and cannot be checked.
     *   * `already_validated` - The authentication has already been validated.
     *   * `expired_auth` - The authentication has expired and cannot be checked.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CreateCheckResponseStatus> status() {
        return (Optional<CreateCheckResponseStatus>) status;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The UUID of the corresponding authentication.
     */
    public CreateCheckResponse withAuthenticationUuid(String authenticationUuid) {
        Utils.checkNotNull(authenticationUuid, "authenticationUuid");
        this.authenticationUuid = Optional.ofNullable(authenticationUuid);
        return this;
    }

    /**
     * The UUID of the corresponding authentication.
     */
    public CreateCheckResponse withAuthenticationUuid(Optional<String> authenticationUuid) {
        Utils.checkNotNull(authenticationUuid, "authenticationUuid");
        this.authenticationUuid = authenticationUuid;
        return this;
    }

    /**
     * The status of the check. Possible values are:
     *   * `valid` - The code is valid.
     *   * `invalid` - The code is invalid.
     *   * `without_attempt` - No attempt was sent yet, so a check cannot be completed.
     *   * `rate_limited` - The authentication was rate limited and cannot be checked.
     *   * `already_validated` - The authentication has already been validated.
     *   * `expired_auth` - The authentication has expired and cannot be checked.
     * 
     */
    public CreateCheckResponse withStatus(CreateCheckResponseStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The status of the check. Possible values are:
     *   * `valid` - The code is valid.
     *   * `invalid` - The code is invalid.
     *   * `without_attempt` - No attempt was sent yet, so a check cannot be completed.
     *   * `rate_limited` - The authentication was rate limited and cannot be checked.
     *   * `already_validated` - The authentication has already been validated.
     *   * `expired_auth` - The authentication has expired and cannot be checked.
     * 
     */
    public CreateCheckResponse withStatus(Optional<? extends CreateCheckResponseStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateCheckResponse other = (CreateCheckResponse) o;
        return 
            Objects.deepEquals(this.authenticationUuid, other.authenticationUuid) &&
            Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            authenticationUuid,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateCheckResponse.class,
                "authenticationUuid", authenticationUuid,
                "status", status);
    }
    
    public final static class Builder {
 
        private Optional<String> authenticationUuid = Optional.empty();
 
        private Optional<? extends CreateCheckResponseStatus> status = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The UUID of the corresponding authentication.
         */
        public Builder authenticationUuid(String authenticationUuid) {
            Utils.checkNotNull(authenticationUuid, "authenticationUuid");
            this.authenticationUuid = Optional.ofNullable(authenticationUuid);
            return this;
        }

        /**
         * The UUID of the corresponding authentication.
         */
        public Builder authenticationUuid(Optional<String> authenticationUuid) {
            Utils.checkNotNull(authenticationUuid, "authenticationUuid");
            this.authenticationUuid = authenticationUuid;
            return this;
        }

        /**
         * The status of the check. Possible values are:
         *   * `valid` - The code is valid.
         *   * `invalid` - The code is invalid.
         *   * `without_attempt` - No attempt was sent yet, so a check cannot be completed.
         *   * `rate_limited` - The authentication was rate limited and cannot be checked.
         *   * `already_validated` - The authentication has already been validated.
         *   * `expired_auth` - The authentication has expired and cannot be checked.
         * 
         */
        public Builder status(CreateCheckResponseStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The status of the check. Possible values are:
         *   * `valid` - The code is valid.
         *   * `invalid` - The code is invalid.
         *   * `without_attempt` - No attempt was sent yet, so a check cannot be completed.
         *   * `rate_limited` - The authentication was rate limited and cannot be checked.
         *   * `already_validated` - The authentication has already been validated.
         *   * `expired_auth` - The authentication has expired and cannot be checked.
         * 
         */
        public Builder status(Optional<? extends CreateCheckResponseStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public CreateCheckResponse build() {
            return new CreateCheckResponse(
                authenticationUuid,
                status);
        }
    }
}

