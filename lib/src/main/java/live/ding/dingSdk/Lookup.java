/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package live.ding.dingSdk;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import live.ding.dingSdk.utils.HTTPClient;
import live.ding.dingSdk.utils.HTTPRequest;
import live.ding.dingSdk.utils.JSON;

/**
 * Retrieve up-to-date metadata about a specific phone number
 */
public class Lookup {
	
	private SDKConfiguration sdkConfiguration;

	public Lookup(SDKConfiguration sdkConfiguration) {
		this.sdkConfiguration = sdkConfiguration;
	}

    /**
     * Lookup a number
     * @param customerUuid
     * @param phoneNumber
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public live.ding.dingSdk.models.operations.LookupResponse lookup(String customerUuid, String phoneNumber) throws Exception {
        live.ding.dingSdk.models.operations.LookupRequest request = new live.ding.dingSdk.models.operations.LookupRequest(customerUuid, phoneNumber);
        
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = live.ding.dingSdk.utils.Utils.generateURL(live.ding.dingSdk.models.operations.LookupRequest.class, baseUrl, "/lookup/{phone_number}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        java.util.Map<String, java.util.List<String>> headers = live.ding.dingSdk.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        live.ding.dingSdk.models.operations.LookupResponse res = new live.ding.dingSdk.models.operations.LookupResponse(contentType, httpRes.statusCode()) {{
            lookupResponse = null;
            errorResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (live.ding.dingSdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                live.ding.dingSdk.models.shared.LookupResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), live.ding.dingSdk.models.shared.LookupResponse.class);
                res.lookupResponse = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (live.ding.dingSdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                live.ding.dingSdk.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), live.ding.dingSdk.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }
}