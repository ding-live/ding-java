/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package live.ding.dingSdk.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import live.ding.dingSdk.utils.DateTimeDeserializer;
import live.ding.dingSdk.utils.DateTimeSerializer;


public class RetryAuthenticationResponse {
    /**
     * The UUID of the corresponding authentication.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authentication_uuid")
    public String authenticationUuid;

    public RetryAuthenticationResponse withAuthenticationUuid(String authenticationUuid) {
        this.authenticationUuid = authenticationUuid;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public RetryAuthenticationResponse withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The time at which the next retry will be available.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("next_retry_at")
    public OffsetDateTime nextRetryAt;

    public RetryAuthenticationResponse withNextRetryAt(OffsetDateTime nextRetryAt) {
        this.nextRetryAt = nextRetryAt;
        return this;
    }
    
    /**
     * The number of remaining retries.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remaining_retry")
    public Long remainingRetry;

    public RetryAuthenticationResponse withRemainingRetry(Long remainingRetry) {
        this.remainingRetry = remainingRetry;
        return this;
    }
    
    /**
     * The status of the retry. Possible values are:
     *   * `approved` - The retry was approved and a new code was sent.
     *   * `denied` - The retry was denied.
     *   * `no_attempt` - No attempt was sent yet, so a retry cannot be completed.
     *   * `rate_limited` - The authentication was rate limited and cannot be retried.
     *   * `expired_auth` - The authentication has expired and cannot be retried.
     *   * `already_validated` - The authentication has already been validated.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public RetryAuthenticationResponseStatus status;

    public RetryAuthenticationResponse withStatus(RetryAuthenticationResponseStatus status) {
        this.status = status;
        return this;
    }
    
    public RetryAuthenticationResponse(){}
}
