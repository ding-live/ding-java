/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package live.ding.dingSdk.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import live.ding.dingSdk.utils.DateTimeDeserializer;
import live.ding.dingSdk.utils.DateTimeSerializer;

/**
 * CreateAuthenticationResponse - A successful response to an authentication creation request.
 */

public class CreateAuthenticationResponse {
    /**
     * A unique identifier for the authentication that you can use on the /check and /retry endpoints.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authentication_uuid")
    public String authenticationUuid;

    public CreateAuthenticationResponse withAuthenticationUuid(String authenticationUuid) {
        this.authenticationUuid = authenticationUuid;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public CreateAuthenticationResponse withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    /**
     * The time at which the authentication expires and can no longer be checked or retried.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("expires_at")
    public OffsetDateTime expiresAt;

    public CreateAuthenticationResponse withExpiresAt(OffsetDateTime expiresAt) {
        this.expiresAt = expiresAt;
        return this;
    }
    
    /**
     * The status of the authentication. Possible values are:
     *   * `pending` - The OTP code is being sent.
     *   * `rate_limited` - This user is rate-limited and cannot receive another code.
     *   * `spam_detected` - This attempt is flagged as spam. Go to the dashboard for more details.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public Status status;

    public CreateAuthenticationResponse withStatus(Status status) {
        this.status = status;
        return this;
    }
    
    public CreateAuthenticationResponse(){}
}
