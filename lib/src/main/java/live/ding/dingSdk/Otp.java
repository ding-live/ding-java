/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package live.ding.dingSdk;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import live.ding.dingSdk.utils.HTTPClient;
import live.ding.dingSdk.utils.HTTPRequest;
import live.ding.dingSdk.utils.JSON;
import live.ding.dingSdk.utils.SerializedBody;

/**
 * Send OTP codes to your users using their phone numbers.
 */
public class Otp {
	
	private SDKConfiguration sdkConfiguration;

	public Otp(SDKConfiguration sdkConfiguration) {
		this.sdkConfiguration = sdkConfiguration;
	}

    /**
     * Check a code
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public live.ding.dingSdk.models.operations.CheckResponse check(live.ding.dingSdk.models.shared.CreateCheckRequest request) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = live.ding.dingSdk.utils.Utils.generateURL(baseUrl, "/check");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = live.ding.dingSdk.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        live.ding.dingSdk.models.operations.CheckResponse res = new live.ding.dingSdk.models.operations.CheckResponse(contentType, httpRes.statusCode()) {{
            createCheckResponse = null;
            errorResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (live.ding.dingSdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                live.ding.dingSdk.models.shared.CreateCheckResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), live.ding.dingSdk.models.shared.CreateCheckResponse.class);
                res.createCheckResponse = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (live.ding.dingSdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                live.ding.dingSdk.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), live.ding.dingSdk.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Send a code
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public live.ding.dingSdk.models.operations.CreateAutenticationResponse createAutentication(live.ding.dingSdk.models.shared.CreateAuthenticationRequest request) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = live.ding.dingSdk.utils.Utils.generateURL(baseUrl, "/authentication");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = live.ding.dingSdk.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        live.ding.dingSdk.models.operations.CreateAutenticationResponse res = new live.ding.dingSdk.models.operations.CreateAutenticationResponse(contentType, httpRes.statusCode()) {{
            createAuthenticationResponse = null;
            errorResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (live.ding.dingSdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                live.ding.dingSdk.models.shared.CreateAuthenticationResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), live.ding.dingSdk.models.shared.CreateAuthenticationResponse.class);
                res.createAuthenticationResponse = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (live.ding.dingSdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                live.ding.dingSdk.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), live.ding.dingSdk.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }

    /**
     * Perform a retry
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public live.ding.dingSdk.models.operations.RetryResponse retry(live.ding.dingSdk.models.shared.RetryAuthenticationRequest request) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = live.ding.dingSdk.utils.Utils.generateURL(baseUrl, "/retry");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = live.ding.dingSdk.utils.Utils.serializeRequestBody(request, "request", "json");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        live.ding.dingSdk.models.operations.RetryResponse res = new live.ding.dingSdk.models.operations.RetryResponse(contentType, httpRes.statusCode()) {{
            retryAuthenticationResponse = null;
            errorResponse = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (live.ding.dingSdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                live.ding.dingSdk.models.shared.RetryAuthenticationResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), live.ding.dingSdk.models.shared.RetryAuthenticationResponse.class);
                res.retryAuthenticationResponse = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
            if (live.ding.dingSdk.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                live.ding.dingSdk.models.shared.ErrorResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), live.ding.dingSdk.models.shared.ErrorResponse.class);
                res.errorResponse = out;
            }
        }

        return res;
    }
}